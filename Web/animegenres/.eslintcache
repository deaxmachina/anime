[{"/Users/user/Code/Projects/anime/Web/animegenres/src/index.js":"1","/Users/user/Code/Projects/anime/Web/animegenres/src/App.js":"2","/Users/user/Code/Projects/anime/Web/animegenres/src/Components/genres.js":"3","/Users/user/Code/Projects/anime/Web/animegenres/src/Components/Timeline/TimelineCircles.js":"4","/Users/user/Code/Projects/anime/Web/animegenres/src/Components/AnimeGraph/Seasonal/GraphPetalsCircles.js":"5","/Users/user/Code/Projects/anime/Web/animegenres/src/Components/AnimeGraph/Yearly/GraphPetalsCircles.js":"6","/Users/user/Code/Projects/anime/Web/animegenres/src/Components/WholeGraph/WholeGraphDemo/WholeGraphDemo.js":"7","/Users/user/Code/Projects/anime/Web/animegenres/src/Components/WholeGraph/WholeGraphTemplate/WholeGraphTemplate.js":"8","/Users/user/Code/Projects/anime/Web/animegenres/src/Components/WholeGraph/WholeGraphTemplate/AnimeGraph.js":"9","/Users/user/Code/Projects/anime/Web/animegenres/src/Components/WholeGraph/WholeGraphTemplate/AnimeTimeline.js":"10","/Users/user/Code/Projects/anime/Web/animegenres/src/Components/WholeGraph/WholeGraphTemplate/HeroSection.js":"11","/Users/user/Code/Projects/anime/Web/animegenres/src/Components/WholeGraph/WholeGraphPetalsCircles/WholeGraphPetalsCircles.js":"12","/Users/user/Code/Projects/anime/Web/animegenres/src/Components/WholeGraph/WholeGraphPetalsCircles/HeroSection.js":"13","/Users/user/Code/Projects/anime/Web/animegenres/src/Components/WholeGraph/WholeGraphPetalsCircles/AnimeTimeline.js":"14","/Users/user/Code/Projects/anime/Web/animegenres/src/Components/WholeGraph/WholeGraphPetalsCircles/AnimeGraph.js":"15","/Users/user/Code/Projects/anime/Web/animegenres/src/Components/WholeGraph/WholeGraphPetalsCircles/genres.js":"16","/Users/user/Code/Projects/anime/Web/animegenres/src/Components/AnimeGraph/Seasonal/GraphCircles.js":"17"},{"size":153,"mtime":1609547623557,"results":"18","hashOfConfig":"19"},{"size":941,"mtime":1609910630156,"results":"20","hashOfConfig":"19"},{"size":3979,"mtime":1609665206919,"results":"21","hashOfConfig":"19"},{"size":5704,"mtime":1609842383227,"results":"22","hashOfConfig":"19"},{"size":7234,"mtime":1609842645707,"results":"23","hashOfConfig":"19"},{"size":7546,"mtime":1609844685511,"results":"24","hashOfConfig":"19"},{"size":10005,"mtime":1609844967921,"results":"25","hashOfConfig":"19"},{"size":1990,"mtime":1609847189698,"results":"26","hashOfConfig":"19"},{"size":4101,"mtime":1609847265082,"results":"27","hashOfConfig":"19"},{"size":5290,"mtime":1609846897304,"results":"28","hashOfConfig":"19"},{"size":1292,"mtime":1609847228607,"results":"29","hashOfConfig":"19"},{"size":1929,"mtime":1609913342897,"results":"30","hashOfConfig":"19"},{"size":1297,"mtime":1609849299259,"results":"31","hashOfConfig":"19"},{"size":5358,"mtime":1609913655181,"results":"32","hashOfConfig":"19"},{"size":16991,"mtime":1610015700011,"results":"33","hashOfConfig":"19"},{"size":6119,"mtime":1609915202939,"results":"34","hashOfConfig":"19"},{"size":5570,"mtime":1609842659572,"results":"35","hashOfConfig":"19"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},"35xdzh",{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"43"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"38"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"38"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"38"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"38"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/user/Code/Projects/anime/Web/animegenres/src/index.js",[],["79","80"],"/Users/user/Code/Projects/anime/Web/animegenres/src/App.js",[],"/Users/user/Code/Projects/anime/Web/animegenres/src/Components/genres.js",[],["81","82"],"/Users/user/Code/Projects/anime/Web/animegenres/src/Components/Timeline/TimelineCircles.js",["83","84","85","86","87","88","89"],"/Users/user/Code/Projects/anime/Web/animegenres/src/Components/AnimeGraph/Seasonal/GraphPetalsCircles.js",["90","91","92","93"],"import React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport _ from \"lodash\";\nimport * as chroma from \"chroma-js\";\nimport \"../AnimeGraph.css\";\nimport dataLoad from \"../../data/mal_scrape.json\";\nimport { allgenres, genres_categories, colorScales } from \"../../genres.js\"\n\n\n// options for the petal paths //\nconst petalPaths = [\n    'M0 0 C50 50 50 100 0 100 C-50 100 -50 50 0 0',\n    'M0 0 C1 1 1 2 0 2 C-1 2 -1 1 0 0',\n    'M-35 0 C-25 25 25 25 35 0 C50 25 25 75 0 100 C-25 75 -50 25 -35 0',\n    'M0,0 C50,40 50,70 20,100 L0,85 L-20,100 C-50,70 -50,40 0,0',\n    'M0 0 C50 25 50 75 0 100 C-50 75 -50 25 0 0',\n    \"M 0,0 a 25,25 0 1,1 50,0a 25,25 0 1,1 -50,0\"\n]\n\n\nconst AnimeGraph = () => {\n\n  /// refs ///\n  const svgRef = useRef();\n  const xAxisRef = useRef();\n  const yAxisRef = useRef();\n  const gRef = useRef();\n  const nodesRef = useRef();\n\n  /// states ///\n  const [data, setData] = useState(null);\n  const [selectedYear, setSelectedYear] = useState(2006)\n\n  /// constatns ///\n  // dimensions \n  const width = 1400;\n  const height = 700;\n  const margin = {top: 70, bottom: 30, right: 10, left: 30}\n  // for the lower and upper limit of the popularity scale\n  const minPopularity = 5\n  const maxPopularity = 45\n  // colours \n  const shapeBackgroundColour = \"#010B14\"\n\n  /// Data load ///\n  useEffect(() => {\n    //console.log(dataLoad)\n    setData(dataLoad)\n    const startEndYear = d3.extent(dataLoad, d => d.air_year)\n    const yearsRange = _.range(startEndYear[0], startEndYear[1] + 1)\n    console.log(yearsRange)\n  }, []);\n\n  /// D3 Code ///\n  useEffect(() => {\n    if (data && selectedYear) {\n\n      // get only one year \n      let dataOneYear = _.filter(data, {'air_year': parseInt(selectedYear)});\n      console.log(dataOneYear)\n\n      /// Scales ///\n      // X Scale - corresponds to season within a given year \n      const xScale = d3.scaleBand()\n        .domain(['winter', 'summer', 'spring', 'fall']) // the seasons in a year \n        .range([margin.left, width - margin.right])\n        .padding(0.1)\n      // Y Scale - corresponds to the score of anime \n      const yScale = d3.scaleLinear()\n        .domain([d3.min(data, d => d.score), d3.max(data, d => d.score)+1])\n        .range([height - margin.bottom, margin.top])\n      // Popularity scale - number of members who have seen the anime \n      const popularityScale = d3.scaleSqrt()\n        .domain(d3.extent(data, d => d.members))\n        .range([minPopularity, maxPopularity])\n\n      // add radius for convenience\n      dataOneYear.forEach(d => d.r = popularityScale(d.members))\n      \n\n      /// Axes ///\n      // X Axis \n      const xAxis = g => g  \n        .attr(\"transform\", `translate(${0}, ${height - margin.bottom})`)\n        .call(d3.axisBottom(xScale).tickFormat(i => i).tickSizeOuter(0))\n      // Y Axis \n      const yAxis = g => g\n        .attr(\"transform\", `translate(${margin.left}, ${0})`)\n        .call(d3.axisLeft(yScale).ticks(15))\n        .call(g => g.select(\".domain\").remove())\n\n      /// Graph ///\n      const svg = d3.select(gRef.current)\n\n      // Force Simulation - to make the shapes not collide with each other\n      const simulation = d3.forceSimulation(dataOneYear)\n        .force('x', d3.forceX().strength(0.3).x(d => xScale(d['air_season']) + xScale.bandwidth()/2))\n        .force('y', d3.forceY().strength(0.4).y(d => yScale(d['score'])))\n        .force('collide', d3.forceCollide().radius(d => d.r+1).strength(1))\n  \n      // shapes - one for each anime; apply force simulation to these\n      const shapes = svg\n        .selectAll(\".shape-container\")\n        .data(simulation.nodes(), d => d['mal_id'])\n        .join(\"g\")\n        .classed(\"shape-container\", true)\n          .attr(\"opacity\", 0)\n          .attr('transform', d => `translate(${ d.x },${ d.y })`) \n          .on(\"click\", (event, element) => {\n            console.log(element)\n            console.log(element.title)\n            console.log(element.members)\n            console.log(element.score)\n          })\n        \n      // background for the shapes, e.g. \n      // a circle that contains the flowers for each anime\n      const shapesBackground = shapes.selectAll(\"circle\")\n        .data(d => [d])\n        .join(\"circle\")\n        .attr(\"r\", d => d.r)\n        .attr(\"fill\", shapeBackgroundColour)\n        .attr(\"fill-opacity\", 1)\n\n      // the flower of shape for each anime \n      const flowers = shapes.selectAll(\"path\")\n        .data(d => d.genres.sort((a, b) => (\n          _.find(allgenres, ['genre', a.name]).category >= _.find(allgenres, ['genre', b.name]).category\n          ) ? 1 : -1))\n        .join(\"path\")\n          .attr(\"d\", petalPaths[3])\n          // the last arg nodes gives us access to the whole data\n          .attr(\"transform\", function(d, i, nodes){\n            const allData = d3.selectAll(nodes).data() // all data for this selection\n            const parentData = this.parentNode.__data__ // parent data\n            return `rotate(${i * (360 / (allData.length || 1))})scale(${0.008*parentData.r || 0.2})`\n          })\n          .attr(\"fill\", function(d, i, nodes){\n            const parentData = this.parentNode.__data__ // parent data\n            const genre =  parentData.genres[i].name // get genre from parent data \n            let category = _.find(allgenres, ['genre', genre]).category // find genre cat from lookup \n            // fill from the cat-based colour scheme \n            const fill = colorScales[category][_.find(genres_categories, { 'category': category }).genres.indexOf(genre)]\n            return fill\n          })\n          .attr(\"fill-opacity\", 0.85)\n\n      // ticks control the force simulation; translate the flowers to the right place\n      function tick() {\n        shapes\n        .attr('transform', d => `translate(${ d.x },${ d.y })`) \n      }\n      simulation.on(\"tick\", tick)\n\n      // shapes fade in; otherwise they enter from weird places\n      setTimeout(() => {\n        simulation.restart();\n        shapes\n          .transition()\n          .attr(\"opacity\", 1)\n      }, 200);\n      // show the initial arrangement\n      tick();\n\n\n      // call the axes \n      d3.select(xAxisRef.current).call(xAxis)\n      d3.select(yAxisRef.current).call(yAxis)\n\n    } else {\n      console.log(\"Missing data\")\n    }\n  }, [data, selectedYear]);\n\n  // to select year from dropdown \n  const selectYear = (e) => {\n    const currentSelectedYear = e.target.value;\n    setSelectedYear(currentSelectedYear)\n  }\n\n  return (\n    <div className=\"page-container\">\n      <h1>Title</h1>\n        <div className=\"dropdown-menu\">\n          <select id=\"option-select\" onChange={e => selectYear(e)}>\n            <option value=\"\">year</option>\n                {\n                  [1950, 1960, 1970, 1980, 1990, 1995, 1999, 2000, 2003, 2006, 2009, 2012, 2015, 2020].map(year => (\n                    <option value={year}>{year}</option>\n                  ))\n                }\n          </select>\n        </div>\n      <div className=\"wrapper\">\n        <svg ref={svgRef} width={width} height={height}>\n          <g ref={gRef}>\n            <g ref={nodesRef}></g>\n          </g>\n          <g ref={xAxisRef}></g>\n          <g ref={yAxisRef}></g>\n          </svg>\n      </div>\n    </div>\n  )\n};\n\nexport { AnimeGraph }","/Users/user/Code/Projects/anime/Web/animegenres/src/Components/AnimeGraph/Yearly/GraphPetalsCircles.js",["94","95","96","97"],"import React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport _ from \"lodash\";\nimport * as chroma from \"chroma-js\";\nimport \"../AnimeGraph.css\";\nimport dataLoad from \"../../data/mal_scrape.json\";\nimport { allgenres, genres_categories, colorScales } from \"../../genres.js\"\n\n\n// options for the petal paths //\nconst petalPaths = [\n    'M0 0 C50 50 50 100 0 100 C-50 100 -50 50 0 0',\n    'M0 0 C1 1 1 2 0 2 C-1 2 -1 1 0 0',\n    'M-35 0 C-25 25 25 25 35 0 C50 25 25 75 0 100 C-25 75 -50 25 -35 0',\n    'M0,0 C50,40 50,70 20,100 L0,85 L-20,100 C-50,70 -50,40 0,0',\n    'M0 0 C50 25 50 75 0 100 C-50 75 -50 25 0 0',\n    \"M 0,0 a 25,25 0 1,1 50,0a 25,25 0 1,1 -50,0\"\n]\n\n\nconst AnimeGraph = () => {\n\n  /// refs ///\n  const svgRef = useRef();\n  const xAxisRef = useRef();\n  const yAxisRef = useRef();\n  const gRef = useRef();\n  const nodesRef = useRef();\n\n  /// states ///\n  const [data, setData] = useState(null);\n  const [selectedYear, setSelectedYear] = useState(2006)\n\n  /// constatns ///\n  // dimensions \n  const width = 1000;\n  const height = 700;\n  const margin = {top: 70, bottom: 30, right: 10, left: 200}\n  // for the lower and upper limit of the popularity scale\n  const minPopularity = 5\n  const maxPopularity = 45\n  // scale of the petals \n  const petalScale = 0.008\n  // colours \n  const shapeBackgroundColour = \"#010B14\"\n\n  /// Data load ///\n  useEffect(() => {\n    //console.log(dataLoad)\n    setData(dataLoad)\n    const startEndYear = d3.extent(dataLoad, d => d.air_year)\n    const yearsRange = _.range(startEndYear[0], startEndYear[1] + 1)\n    console.log(yearsRange)\n  }, []);\n\n  /// D3 Code ///\n  useEffect(() => {\n    if (data && selectedYear) {\n\n      // get only one year \n      let dataOneYear = _.filter(data, {'air_year': parseInt(selectedYear)});\n      // only the unique anime for the year \n      const dataOneYearUniq = _.uniqBy(dataOneYear, 'mal_id')\n\n      /// Scales ///\n      // X Scale \n      // use a band scale to position all the anime in the year horizontally \n      // this is needed with the force as it requires an x-position that \n      // the circles should move towards \n      const xScale = d3.scaleBand()\n        .domain(_.range(dataOneYear.length)) // number of anime in the year\n        .range([margin.left, width - margin.right])\n        .padding(0.1)\n      // Y Scale - corresponds to the score of anime \n      const yScale = d3.scaleLinear()\n        .domain([d3.min(data, d => d.score), d3.max(data, d => d.score)+1])\n        .range([height - margin.bottom, margin.top])\n      // Popularity scale - number of members who have seen the anime \n      const popularityScale = d3.scaleSqrt()\n        .domain(d3.extent(data, d => d.members))\n        .range([minPopularity, maxPopularity])\n\n      // add radius for convenience\n      dataOneYear.forEach(d => d.r = popularityScale(d.members))\n      \n\n      /// Axes ///\n      // Y Axis \n      const yAxis = g => g\n        .attr(\"transform\", `translate(${margin.left}, ${0})`)\n        .call(d3.axisLeft(yScale).ticks(15))\n        .call(g => g.select(\".domain\").remove())\n\n      /// Graph ///\n      const svg = d3.select(gRef.current)\n        .attr(\"transform\", `translate(${margin.left}, ${0})`)\n\n      // Force Simulation - to make the shapes not collide with each other\n      const simulation = d3.forceSimulation(dataOneYearUniq, d => d.mal_id)\n        // x is computed with the band scale \n        .force('x', d3.forceX().strength(0.3).x((d, i) => xScale(i) + xScale.bandwidth()/2))\n        .force('y', d3.forceY().strength(0.4).y(d => yScale(d['score'])))\n        .force('collide', d3.forceCollide().radius(d => d.r+1).strength(1))\n  \n      // shapes - one for each anime; apply force simulation to these\n      // also apply any click events at this level \n      const shapes = svg\n        .selectAll(\".shape-container\")\n        .data(simulation.nodes(), d => d['mal_id'])\n        .join(\"g\")\n        .classed(\"shape-container\", true)\n          .attr(\"opacity\", 0)\n          .attr('transform', d => `translate(${ d.x },${ d.y })`) \n          .on(\"click\", (event, element) => {\n            console.log(element)\n            console.log(element.title)\n            console.log(element.members)\n            console.log(element.score)\n          })\n        \n      // background for the shapes, e.g. \n      // a circle that contains the flowers for each anime\n      const shapesBackground = shapes.selectAll(\"circle\")\n        .data(d => [d])\n        .join(\"circle\")\n        .attr(\"r\", d => d.r)\n        .attr(\"fill\", shapeBackgroundColour)\n        .attr(\"fill-opacity\", 1)\n\n      // the flower of shape for each anime \n      const flowers = shapes.selectAll(\"path\")\n        .data(d => d.genres.sort((a, b) => (\n          _.find(allgenres, ['genre', a.name]).category >= _.find(allgenres, ['genre', b.name]).category\n          ) ? 1 : -1))\n        .join(\"path\")\n          .attr(\"d\", petalPaths[3])\n          // the last arg nodes gives us access to the whole data\n          .attr(\"transform\", function(d, i, nodes){\n            const allData = d3.selectAll(nodes).data() // all data for this selection\n            const parentData = this.parentNode.__data__ // parent data\n            return `rotate(${i * (360 / (allData.length || 1))})scale(${petalScale * parentData.r || 0.2})`\n          })\n          .attr(\"fill\", function(d, i, nodes){\n            const parentData = this.parentNode.__data__ // parent data\n            const genre =  parentData.genres[i].name // get genre from parent data \n            let category = _.find(allgenres, ['genre', genre]).category // find genre cat from lookup \n            // fill from the cat-based colour scheme \n            const fill = colorScales[category][_.find(genres_categories, { 'category': category }).genres.indexOf(genre)]\n            return fill\n          })\n          .attr(\"fill-opacity\", 0.9)\n\n      // ticks control the force simulation; translate the flowers to the right place\n      function tick() {\n        shapes\n        .attr('transform', d => `translate(${ d.x },${ d.y })`) \n      }\n      simulation.on(\"tick\", tick)\n\n      // shapes fade in; otherwise they enter from weird places\n      setTimeout(() => {\n        simulation.restart();\n        shapes\n          .transition()\n          .attr(\"opacity\", 1)\n      }, 200);\n      // show the initial arrangement\n      tick();\n\n\n      // call the axes \n      d3.select(yAxisRef.current).call(yAxis)\n\n    } else {\n      console.log(\"Missing data\")\n    }\n  }, [data, selectedYear]);\n\n  // to select year from dropdown \n  const selectYear = (e) => {\n    const currentSelectedYear = e.target.value;\n    setSelectedYear(currentSelectedYear)\n  }\n\n  return (\n    <div className=\"page-container\">\n      <h1>Title</h1>\n        <div className=\"dropdown-menu\">\n          <select id=\"option-select\" onChange={e => selectYear(e)}>\n            <option value=\"\">year</option>\n                {\n                  [1950, 1960, 1970, 1980, 1990, 1995, 1999, 2000, 2003, 2006, 2009, 2012, 2015, 2020].map(year => (\n                    <option value={year}>{year}</option>\n                  ))\n                }\n          </select>\n        </div>\n      <div className=\"wrapper\">\n        <svg \n          ref={svgRef} \n          width={width + margin.left + margin.right} \n          height={height + margin.top + margin.bottom}\n        >\n          <g ref={gRef}>\n            <g ref={nodesRef}></g>\n          </g>\n          <g ref={xAxisRef}></g>\n          <g ref={yAxisRef}></g>\n          </svg>\n      </div>\n    </div>\n  )\n};\n\nexport { AnimeGraph }",["98","99"],"/Users/user/Code/Projects/anime/Web/animegenres/src/Components/WholeGraph/WholeGraphDemo/WholeGraphDemo.js",["100","101","102","103","104"],"/Users/user/Code/Projects/anime/Web/animegenres/src/Components/WholeGraph/WholeGraphTemplate/WholeGraphTemplate.js",["105","106","107"],"/Users/user/Code/Projects/anime/Web/animegenres/src/Components/WholeGraph/WholeGraphTemplate/AnimeGraph.js",["108","109","110","111"],"/Users/user/Code/Projects/anime/Web/animegenres/src/Components/WholeGraph/WholeGraphTemplate/AnimeTimeline.js",["112","113","114","115"],"/Users/user/Code/Projects/anime/Web/animegenres/src/Components/WholeGraph/WholeGraphTemplate/HeroSection.js",["116","117"],"/Users/user/Code/Projects/anime/Web/animegenres/src/Components/WholeGraph/WholeGraphPetalsCircles/WholeGraphPetalsCircles.js",["118","119","120"],"import React, { useState, useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport _ from \"lodash\";\nimport * as chroma from \"chroma-js\";\nimport \"./WholeGraphPetalsCircles.css\";\nimport dataLoad from \"../../data/mal_scrape.json\";\nimport AnimeGraph from \"./AnimeGraph\";\nimport AnimeTimeline from \"./AnimeTimeline\";\nimport HeroSection from \"./HeroSection\";\n\n\n\nconst WholeGraphPetalsCircles = () => {\n\n  /// states ///\n  const [data, setData] = useState(null);\n  const [allData, setAllData] = useState(null)\n  const [selectedAnime, setSelectedAnime] = useState(null)\n  const [selectedYear, setSelectedYear] = useState(2006)\n\n  /// Data load ///\n  useEffect(() => {\n    // transform data into just {year: 2020, number_anime: 800}\n    const counts = _.countBy(dataLoad, 'air_year')\n    // transform data into required array of obj format\n    const countsList = []\n      for (const [year, count] of Object.entries(counts)) {\n        countsList.push({\n          year: year,\n          number_animes: count\n        })\n      };\n    const filteredCountsList = _.filter(countsList, function(o) { return o.year >= 1970 });\n    setData(filteredCountsList)\n    setAllData(dataLoad)\n  }, []);\n\n\n  return (\n    <div className=\"whole-graph-template\">\n      <HeroSection \n        selectedYear={selectedYear}\n      />\n      <div className=\"whole-graph-template-container\">\n        <AnimeTimeline\n          data={data}\n          allData={allData}\n          selectedAnime={selectedAnime}\n          selectedYear={selectedYear}\n          setSelectedYear={setSelectedYear}\n          setSelectedAnime={setSelectedAnime}\n        />\n        <AnimeGraph\n          data={data}\n          allData={allData}\n          selectedAnime={selectedAnime}\n          selectedYear={selectedYear}\n          setSelectedYear={setSelectedYear}\n          setSelectedAnime={setSelectedAnime}\n        />\n      </div>\n    </div>\n\n  )\n};\n\nexport { WholeGraphPetalsCircles }","/Users/user/Code/Projects/anime/Web/animegenres/src/Components/WholeGraph/WholeGraphPetalsCircles/HeroSection.js",["121","122"],"import React from \"react\";\nimport _ from \"lodash\";\nimport \"./WholeGraphPetalsCircles.css\";\n\n\nconst HeroSection = ({ selectedYear }) => {\n  return (\n    <>\n      <h1 className=\"whole-graph-template-title\">A Timeline of Anime</h1>\n      <div className=\"whole-graph-template-subtitle\">\n        Explore the evolution of anime over the decades using anime data from one of the most popular anime fan websites <a href=\"https://myanimelist.net/\" target=\"_blank\">MyAnimeList</a>\n      </div>\n      <div className=\"whole-graph-template-instructions-title\">How to read this graph:</div>\n      <ul className=\"whole-graph-template-instructions\">\n        <li><span>Bigger & more pink timeline circle = more anime.</span></li>\n        <li><span>The numbers in the circle timeline = number of anime in that year.</span></li>\n        <li><span>Click on a circle in the timeline to reveal a graph of all the anime of that year.</span></li>\n        <li><span>Each bubble of the revealed graph corresponds to an anime. Size = popularity on MyAnimeList.</span></li>\n        <li><span>Hover on a bubble to reveal information about the anime.</span></li>\n      </ul>\n      <div>show anime for</div>\n      <h1 className=\"whole-graph-template-selected-year\">{selectedYear}</h1>\n    </>\n  )\n}\n\nexport default HeroSection;\n","/Users/user/Code/Projects/anime/Web/animegenres/src/Components/WholeGraph/WholeGraphPetalsCircles/AnimeTimeline.js",["123","124","125","126"],"import React, { useEffect, useRef } from \"react\";\nimport * as d3 from \"d3\";\nimport _ from \"lodash\";\nimport * as chroma from \"chroma-js\";\nimport \"./WholeGraphPetalsCircles.css\";\n\n\nconst AnimeTimeline = ({ \n  data, allData, selectedYear, setSelectedYear \n  }) => {\n\n  /// refs ///\n  const svgRef = useRef();\n  const xAxisRef = useRef();\n  const gRef = useRef();\n  const rectRef = useRef();\n\n  /// constatns ///\n  // dimensions \n  const width = 1300;\n  const heightRect = 100;\n  const height = 100;\n  const margin = {top: 0, bottom: 45, right: 40, left: 40}\n  // radius of the timeline circles \n  const minRadiusTimeline = 3;\n  const maxRadiusTimeline = 15;\n  // colours \n  const shapeBackgroundColour = \"#010B14\" //  \"#14213d\" \n  const lowNumberColour = \"#003f66\" // \"#4361ee\" \"#268ECF\"\n  const highNumberColour =  \"#268ECF\" // \"#f72585\" \"#4361ee\"\n  const axisTextColour = \"white\"\n\n\n    /// D3 Code ///\n  useEffect(() => {\n    if (data && allData) {\n\n      let dataOneYear = _.filter(allData, {'air_year': parseInt(selectedYear)});\n\n      /// Scales ///\n      // X Scale \n      const xScale = d3.scaleBand()\n        .domain(data.map(d => d['year'])) // all years\n        .range([margin.left, width - margin.right])\n        .padding(0.1)\n\n      // Colour scale - number of anime per year\n      // find the min and the max number of anime in any given year \n      // for now just using 0 to 1200 hardcoded \n      const colorScale = chroma.scale([lowNumberColour, highNumberColour]\n        .map(color => chroma(color).saturate(0)))\n        .domain([0, 1110])\n      // Scale the circles of the timeline by number of anime of that year\n      const numberAnimeScale = d3.scaleSqrt()\n        .domain(d3.extent(data, d => d.number_animes))\n        .range([minRadiusTimeline, maxRadiusTimeline])\n\n      /// Axes ///\n      // X Axis \n      const xAxis = g => g  \n        .attr(\"transform\", `translate(${0}, ${heightRect - margin.bottom})`)\n        .call(d3.axisBottom(xScale).tickFormat(i => i).tickSizeOuter(0))\n        .call(g => g.select(\".domain\").remove())\n        .call(g => g.selectAll(\"text\")\n          .style(\"fill\", axisTextColour)\n          .attr(\"font-size\", \"0.9em\")\n          .style(\"text-anchor\", \"end\")\n          .attr(\"dx\", \"-.8em\")\n          .attr(\"dy\", \".15em\")\n          .attr(\"transform\", \"rotate(-60)\")\n        )\n        .call(g => g.selectAll(\".tick\")\n          .style(\"color\", axisTextColour)\n        )\n\n      /// Graph ///\n      const g = d3.select(gRef.current)\n\n      // draw a rectangle behind the circles \n      const rectBackground = d3.select(rectRef.current)\n        .append(\"rect\")\n        .attr(\"rx\", 30)\n        .attr(\"ry\", 30)\n        .attr(\"width\", width)\n        .attr(\"height\", heightRect)\n        .attr('fill', shapeBackgroundColour) \n\n      // draw one circle for each year, coloured by number of anime\n      const yearCircles = g\n        .selectAll(\".year-circles\")\n        .data(data)\n        .join(\"circle\")\n        .classed(\"year-circles\", true)\n          .attr(\"r\", d => numberAnimeScale(d['number_animes']))\n          .attr(\"cx\", d => xScale(d['year']) + xScale.bandwidth()/2)\n          .attr(\"cy\", heightRect/3)\n          .attr(\"fill\", d => colorScale(d['number_animes']))\n          .attr(\"fill-opacity\", 1)\n          .attr(\"stroke\", d => colorScale(d['number_animes']))\n          // if you want the stroke to scale with size of circle\n          //.attr(\"stroke-width\", d => numberAnimeScale(d['number_animes']) * 0.5)\n          // if you want the stroke to be constant\n          .attr(\"stroke-width\", 8)\n          .attr(\"stroke-opacity\", 0.5)\n     \n      // add text with number of animes on top of each circle \n      const yearCirclesText = g\n          .selectAll(\".circles-text\")\n          .data(data)\n          .join(\"text\")\n          .classed(\"circles-text\", true)\n            .attr(\"x\", d => xScale(d['year']) + xScale.bandwidth()/2)\n            .attr(\"y\", heightRect/3)\n            .attr(\"dy\", \".35em\")\n            .text(d => d['number_animes'])\n            .attr(\"fill\", axisTextColour)\n            .attr(\"font-size\", \"8px\")\n            .attr(\"text-anchor\", \"middle\")\n            .attr(\"opacity\", 0.8)\n            .attr('cursor', 'default')\n            .attr('pointer-events', 'none')\n            .attr(\"id\", d => d['year'])\n      \n      // set up events on the circles \n      yearCircles\n        .on(\"mouseenter\", onMouseEnter)\n        .on(\"mouseleave\", onMouseLeave)\n        .on(\"click\", onClick)\n      \n      function onClick(e, datum) {\n        setSelectedYear(datum['year'])\n        // expand the radius \n        d3.select(this).attr(\"r\", d => 1.5 * numberAnimeScale(d['number_animes']))\n      }\n      function onMouseEnter(e, datum) {\n        // expand the radius \n        d3.select(this).attr(\"r\", d => 1.5 * numberAnimeScale(d['number_animes']))\n      }\n\n      function onMouseLeave(e, datum) {\n        // shrink the radius back to normal\n        d3.select(this).attr(\"r\", d => numberAnimeScale(d['number_animes']))\n      }\n\n      // call the axes \n      d3.select(xAxisRef.current).call(xAxis)\n\n    } else {\n      console.log(\"Missing data\")\n    }\n  }, [data, selectedYear, allData]);\n\n\n  return (\n    <>\n      <svg ref={svgRef} width={width} height={height}>\n        <g ref={rectRef}></g>\n        <g ref={gRef}></g>\n        <g ref={xAxisRef}></g>\n      </svg>\n    </>\n  )\n}\n\nexport default AnimeTimeline;","/Users/user/Code/Projects/anime/Web/animegenres/src/Components/WholeGraph/WholeGraphPetalsCircles/AnimeGraph.js",["127","128","129","130","131","132","133","134","135","136","137"],"/Users/user/Code/Projects/anime/Web/animegenres/src/Components/WholeGraph/WholeGraphPetalsCircles/genres.js",["138","139","140","141","142"],"import * as chroma from \"chroma-js\";\nimport _ from \"lodash\";\n\n\n\n//// Current working version ////\n\nconst firstColour =  \"#21ABC0\"\nconst secondColour = \"#970C3F\"\nconst thirdColour =  \"#22223b\"\n\n// order genres by 'seriousness' \nconst orderedGenres = [\n  \"Kids\",\n  \"Comedy\",\n  \"School\",\n  'Shounen',\n  \"Shoujo\",\n  \"Fantasy\",\n  \"Super Power\",\n  \"Cars\",\n  \"Sports\",\n  \"Game\",\n  \"Adventure\",\n  \"Action\",\n  \"Demons\",\n  \"Samurai\",\n  \"Supernatural\",\n  'Magic',\n  \"Martial Arts\",\n  \"Mecha\",\n  \"Slice of Life\",\n  \"Parody\",\n  \"Romance\",\n  \"Music\",\n  \"Josei\",\n  \"Seinen\",  \n  \"Mystery\",\n  \"Horror\",\n  \"Thriller\",\n  \"Space\",\n  \"Police\",\n  \"Military\",\n  \"Drama\",\n  \"Historical\",\n  'Sci-Fi',\n  \"Psychological\",\n  \"Dementia\",\n]\n\n// these genres not included in the above list \nconst hentaiGenres = [\n  'Hentai',\n  \"Ecchi\",\n  \"Harem\",\n  \"Shounen Ai\",\n  \"Shoujo Ai\",\n  \"Yaoi\",\n  \"Yuri\",\n]\n\nconst colourScaleOrderedGenres = chroma.scale([firstColour, secondColour, thirdColour]\n  .map(color => chroma(color).brighten(0))\n  .map(color => chroma(color).saturate(0.1))\n  )\n  //.mode('lrgb') // hsl lrgb lab\n  .colors(orderedGenres.length)\n\n\n\n\n//// Remnants from previous versions - keep for reference ////\n\nconst lowerGenreColour =   \"#21ABC0\" // \"#f72585\" \"#4d194d\" \"#9e0059\"\nconst higherGengeColour =   \"#268ECF\" // \"#4361ee\" \"#006466\" \"#268ECF\"\n\n// All the genres with category from v1 \nconst allgenres = [\n  {\"category\": \"genres1\", \"genre\": \"Romance\"},\n  {\"category\": \"genres1\", \"genre\": \"Shoujo\"},\n  {\"category\": \"genres1\", \"genre\": \"Josei\"},\n  {\"category\": \"genres1\", \"genre\": \"Slice of Life\"},\n  {\"category\": \"genres1\", \"genre\": \"School\"},\n  {\"category\": \"genres1\", \"genre\": \"Comedy\"},\n  {\"category\": \"genres1\", \"genre\": \"Parody\"},\n  {\"category\": \"genres1\", \"genre\": \"Music\"},\n  {\"category\": \"genres2\", \"genre\": \"Drama\"},\n  {\"category\": \"genres3\", \"genre\": \"Kids\"},\n  {\"category\": \"genres4\", \"genre\": 'Shounen'},\n  {\"category\": \"genres4\", \"genre\": \"Action\"},\n  {\"category\": \"genres4\", \"genre\": \"Thriller\"},\n  {\"category\": \"genres4\", \"genre\": \"Fantasy\"},\n  {\"category\": \"genres4\", \"genre\": \"Adventure\"},\n  {\"category\": \"genres4\", \"genre\": \"Supernatural\"},\n  {\"category\": \"genres4\", \"genre\": \"Super Power\"},\n  {\"category\": \"genres4\", \"genre\": 'Magic'},\n  {\"category\": \"genres4\", \"genre\": \"Demons\"},\n  {\"category\": \"genres4\", \"genre\": \"Historical\"},\n  {\"category\": \"genres4\", \"genre\": \"Seinen\"},\n  {\"category\": \"genres4\", \"genre\": \"Mystery\"},\n  {\"category\": \"genres4\", \"genre\": \"Horror\"},\n  {\"category\": \"genres4\", \"genre\": \"Sports\"},\n  {\"category\": \"genres4\", \"genre\": \"Game\"},\n  {\"category\": \"genres4\", \"genre\": \"Martial Arts\"},\n  {\"category\": \"genres4\", \"genre\": \"Samurai\"},\n  {\"category\": \"genres4\", \"genre\": \"Vampire\"},\n  {\"category\": \"genres4\", \"genre\": \"Cars\"},\n  {\"category\": \"genres5\", \"genre\": 'Sci-Fi'},\n  {\"category\": \"genres5\", \"genre\": \"Mecha\"},\n  {\"category\": \"genres5\", \"genre\": \"Space\"},\n  {\"category\": \"genres5\", \"genre\": \"Psychological\"},\n  {\"category\": \"genres5\", \"genre\": \"Dementia\"},\n  {\"category\": \"genres5\", \"genre\": \"Police\"},\n  {\"category\": \"genres5\", \"genre\": \"Military\"},\n  {\"category\": \"genres6\", \"genre\": 'Hentai'},\n  {\"category\": \"genres6\", \"genre\": \"Ecchi\"},\n  {\"category\": \"genres6\", \"genre\": \"Harem\"},\n  {\"category\": \"genres6\", \"genre\": \"Shounen Ai\"},\n  {\"category\": \"genres6\", \"genre\": \"Shoujo Ai\"},\n  {\"category\": \"genres6\", \"genre\": \"Yaoi\"},\n  {\"category\": \"genres6\", \"genre\": \"Yuri\"},\n]\n\n// Genres v1 \nconst genres_categories = [\n  {category: \"genres1\", genres: [\"Romance\", \"Shoujo\", \"Josei\", \"Slice of Life\", \"School\", 'Comedy', \"Parody\", \"Music\"]},\n  {category: \"genres2\", genres: ['Drama']},\n  {category: \"genres3\", genres: ['Kids']},\n  {category: \"genres4\", genres: ['Shounen','Action', \"Thriller\",'Fantasy', 'Adventure', \n  \"Supernatural\", \"Super Power\", \"Magic\", \"Demons\", \"Historical\", \"Seinen\", \n  \"Mystery\", \"Horror\", \"Sports\",  \"Game\", \"Martial Arts\",  \"Samurai\",  \n  \"Vampire\",\"Cars\"]},\n  {category: \"genres5\", genres: ['Sci-Fi', \"Mecha\", \"Space\", \"Psychological\", \"Dementia\", \"Police\", \"Military\"]},\n  {category: \"genres6\", genres: ['Hentai', \"Ecchi\", \"Harem\", \"Shounen Ai\", \"Shoujo Ai\", \"Yaoi\", \"Yuri\"]}\n];\n\n// Colour Scale per category of genres v1 \nconst colorScale1 = chroma.scale([\"#f14f8a\", \"#9e0059\"]).colors(_.find(genres_categories, { 'category': 'genres1' }).genres.length)\nconst colorScale2 = chroma.scale([\"#9e0059\", \"#9e0059\"]).colors(_.find(genres_categories, { 'category': 'genres2' }).genres.length)\nconst colorScale3 = chroma.scale([\"#21ABC0\", \"#21ABC0\"]).colors(_.find(genres_categories, { 'category': 'genres3' }).genres.length)\nconst colorScale4 = chroma.scale([\"#21ABC0\", \"#268ECF\"]).colors(_.find(genres_categories, { 'category': 'genres4' }).genres.length)\nconst colorScale5 = chroma.scale([\"#4a4e69\", \"#22223b\"]).colors(_.find(genres_categories, { 'category': 'genres5' }).genres.length)\nconst colorScale6 = chroma.scale([\"#f14f8a\", \"#f14f8a\"]).colors(_.find(genres_categories, { 'category': 'genres6' }).genres.length)\nconst colorScales = {\n        \"genres1\": colorScale1,\n        \"genres2\": colorScale2,\n        \"genres3\": colorScale3,\n        \"genres4\": colorScale4,\n        \"genres5\": colorScale5,\n        \"genres6\": colorScale6\n}\n\n// Take the top 20 genres and split them into categories of less or more serious\n// Within each category have a gradient between two close by colours, e.g. two blues for the more serious and two pinks for the less serious \n// For all the other genres, colour in terms of seriousness as well and then have a gradient with another colour \nconst top20Genres = [\n  \"Comedy\",\n  \"Action\",\n  \"Fantasy\",\t\n  \"Adventure\",\t\n  \"Sci-Fi\",\t\n  \"Drama\"\t,\n  \"Shounen\",\n  \"Romance\",\n  \"Slice of Life\",\t\n  \"School\",\n  \"Kids\",\t\n  \"Supernatural\",\t\n  \"Hentai\",\t\n  \"Mecha\",\t\n  \"Magic\",\t\n  \"Historical\",\t\n  \"Seinen\",\t\n  \"Ecchi\",\t\n  \"Mystery\",\t\n  \"Shoujo\"\n]\n\nconst top20GenresSerious = [\n  \"Sci-Fi\",\t\n  \"Drama\"\t,\n]\n\nconst top20GenresChill = [\n  \"Comedy\",\n  \"Action\",\n  \"Fantasy\",\n  \"Adventure\",\n  \"Shounen\",\t\n  \"Romance\",\n  \"Slice of Life\",\n]\n\t\n\nexport { allgenres, genres_categories, colorScales, orderedGenres, hentaiGenres, colourScaleOrderedGenres }","/Users/user/Code/Projects/anime/Web/animegenres/src/Components/AnimeGraph/Seasonal/GraphCircles.js",["143","144"],{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","replacedBy":"148"},{"ruleId":"145","replacedBy":"149"},{"ruleId":"147","replacedBy":"150"},{"ruleId":"151","severity":1,"message":"152","line":19,"column":10,"nodeType":"153","messageId":"154","endLine":19,"endColumn":22},{"ruleId":"151","severity":1,"message":"155","line":19,"column":24,"nodeType":"153","messageId":"154","endLine":19,"endColumn":39},{"ruleId":"151","severity":1,"message":"156","line":26,"column":9,"nodeType":"153","messageId":"154","endLine":26,"endColumn":15},{"ruleId":"151","severity":1,"message":"157","line":39,"column":11,"nodeType":"153","messageId":"154","endLine":39,"endColumn":21},{"ruleId":"151","severity":1,"message":"158","line":98,"column":13,"nodeType":"153","messageId":"154","endLine":98,"endColumn":27},{"ruleId":"151","severity":1,"message":"159","line":124,"column":13,"nodeType":"153","messageId":"154","endLine":124,"endColumn":28},{"ruleId":"160","severity":1,"message":"161","line":163,"column":6,"nodeType":"162","endLine":163,"endColumn":12,"suggestions":"163"},{"ruleId":"151","severity":1,"message":"164","line":4,"column":13,"nodeType":"153","messageId":"154","endLine":4,"endColumn":19},{"ruleId":"151","severity":1,"message":"165","line":118,"column":13,"nodeType":"153","messageId":"154","endLine":118,"endColumn":29},{"ruleId":"151","severity":1,"message":"166","line":126,"column":13,"nodeType":"153","messageId":"154","endLine":126,"endColumn":20},{"ruleId":"160","severity":1,"message":"167","line":173,"column":6,"nodeType":"162","endLine":173,"endColumn":26,"suggestions":"168"},{"ruleId":"151","severity":1,"message":"164","line":4,"column":13,"nodeType":"153","messageId":"154","endLine":4,"endColumn":19},{"ruleId":"151","severity":1,"message":"165","line":123,"column":13,"nodeType":"153","messageId":"154","endLine":123,"endColumn":29},{"ruleId":"151","severity":1,"message":"166","line":131,"column":13,"nodeType":"153","messageId":"154","endLine":131,"endColumn":20},{"ruleId":"160","severity":1,"message":"167","line":177,"column":6,"nodeType":"162","endLine":177,"endColumn":26,"suggestions":"169"},{"ruleId":"145","replacedBy":"170"},{"ruleId":"147","replacedBy":"171"},{"ruleId":"151","severity":1,"message":"172","line":31,"column":9,"nodeType":"153","messageId":"154","endLine":31,"endColumn":23},{"ruleId":"151","severity":1,"message":"158","line":111,"column":13,"nodeType":"153","messageId":"154","endLine":111,"endColumn":27},{"ruleId":"151","severity":1,"message":"159","line":138,"column":13,"nodeType":"153","messageId":"154","endLine":138,"endColumn":28},{"ruleId":"160","severity":1,"message":"161","line":225,"column":6,"nodeType":"162","endLine":225,"endColumn":35,"suggestions":"173"},{"ruleId":"174","severity":1,"message":"175","line":232,"column":122,"nodeType":"176","endLine":232,"endColumn":173},{"ruleId":"151","severity":1,"message":"177","line":1,"column":38,"nodeType":"153","messageId":"154","endLine":1,"endColumn":44},{"ruleId":"151","severity":1,"message":"178","line":2,"column":13,"nodeType":"153","messageId":"154","endLine":2,"endColumn":15},{"ruleId":"151","severity":1,"message":"164","line":4,"column":13,"nodeType":"153","messageId":"154","endLine":4,"endColumn":19},{"ruleId":"151","severity":1,"message":"179","line":20,"column":9,"nodeType":"153","messageId":"154","endLine":20,"endColumn":15},{"ruleId":"151","severity":1,"message":"180","line":25,"column":9,"nodeType":"153","messageId":"154","endLine":25,"endColumn":30},{"ruleId":"151","severity":1,"message":"181","line":28,"column":9,"nodeType":"153","messageId":"154","endLine":28,"endColumn":23},{"ruleId":"160","severity":1,"message":"182","line":95,"column":6,"nodeType":"162","endLine":95,"endColumn":35,"suggestions":"183"},{"ruleId":"151","severity":1,"message":"184","line":37,"column":11,"nodeType":"153","messageId":"154","endLine":37,"endColumn":22},{"ruleId":"151","severity":1,"message":"158","line":79,"column":13,"nodeType":"153","messageId":"154","endLine":79,"endColumn":27},{"ruleId":"151","severity":1,"message":"159","line":106,"column":13,"nodeType":"153","messageId":"154","endLine":106,"endColumn":28},{"ruleId":"160","severity":1,"message":"185","line":150,"column":6,"nodeType":"162","endLine":150,"endColumn":35,"suggestions":"186"},{"ruleId":"151","severity":1,"message":"187","line":2,"column":8,"nodeType":"153","messageId":"154","endLine":2,"endColumn":9},{"ruleId":"174","severity":1,"message":"175","line":11,"column":122,"nodeType":"176","endLine":11,"endColumn":173},{"ruleId":"151","severity":1,"message":"177","line":1,"column":38,"nodeType":"153","messageId":"154","endLine":1,"endColumn":44},{"ruleId":"151","severity":1,"message":"178","line":2,"column":13,"nodeType":"153","messageId":"154","endLine":2,"endColumn":15},{"ruleId":"151","severity":1,"message":"164","line":4,"column":13,"nodeType":"153","messageId":"154","endLine":4,"endColumn":19},{"ruleId":"151","severity":1,"message":"187","line":2,"column":8,"nodeType":"153","messageId":"154","endLine":2,"endColumn":9},{"ruleId":"174","severity":1,"message":"175","line":11,"column":122,"nodeType":"176","endLine":11,"endColumn":173},{"ruleId":"151","severity":1,"message":"184","line":38,"column":11,"nodeType":"153","messageId":"154","endLine":38,"endColumn":22},{"ruleId":"151","severity":1,"message":"158","line":80,"column":13,"nodeType":"153","messageId":"154","endLine":80,"endColumn":27},{"ruleId":"151","severity":1,"message":"159","line":107,"column":13,"nodeType":"153","messageId":"154","endLine":107,"endColumn":28},{"ruleId":"160","severity":1,"message":"185","line":151,"column":6,"nodeType":"162","endLine":151,"endColumn":35,"suggestions":"188"},{"ruleId":"151","severity":1,"message":"189","line":34,"column":9,"nodeType":"153","messageId":"154","endLine":34,"endColumn":21},{"ruleId":"151","severity":1,"message":"190","line":40,"column":9,"nodeType":"153","messageId":"154","endLine":40,"endColumn":20},{"ruleId":"151","severity":1,"message":"166","line":157,"column":13,"nodeType":"153","messageId":"154","endLine":157,"endColumn":20},{"ruleId":"151","severity":1,"message":"191","line":264,"column":13,"nodeType":"153","messageId":"154","endLine":264,"endColumn":41},{"ruleId":"151","severity":1,"message":"192","line":276,"column":13,"nodeType":"153","messageId":"154","endLine":276,"endColumn":48},{"ruleId":"151","severity":1,"message":"193","line":326,"column":15,"nodeType":"153","messageId":"154","endLine":326,"endColumn":34},{"ruleId":"194","severity":1,"message":"195","line":355,"column":34,"nodeType":"196","messageId":"197","endLine":355,"endColumn":36},{"ruleId":"194","severity":1,"message":"195","line":380,"column":34,"nodeType":"196","messageId":"197","endLine":380,"endColumn":36},{"ruleId":"194","severity":1,"message":"195","line":381,"column":32,"nodeType":"196","messageId":"197","endLine":381,"endColumn":34},{"ruleId":"160","severity":1,"message":"167","line":402,"column":6,"nodeType":"162","endLine":402,"endColumn":35,"suggestions":"198"},{"ruleId":"151","severity":1,"message":"199","line":405,"column":9,"nodeType":"153","messageId":"154","endLine":405,"endColumn":19},{"ruleId":"151","severity":1,"message":"200","line":74,"column":7,"nodeType":"153","messageId":"154","endLine":74,"endColumn":23},{"ruleId":"151","severity":1,"message":"201","line":75,"column":7,"nodeType":"153","messageId":"154","endLine":75,"endColumn":24},{"ruleId":"151","severity":1,"message":"202","line":156,"column":7,"nodeType":"153","messageId":"154","endLine":156,"endColumn":18},{"ruleId":"151","severity":1,"message":"203","line":179,"column":7,"nodeType":"153","messageId":"154","endLine":179,"endColumn":25},{"ruleId":"151","severity":1,"message":"204","line":184,"column":7,"nodeType":"153","messageId":"154","endLine":184,"endColumn":23},{"ruleId":"151","severity":1,"message":"205","line":28,"column":9,"nodeType":"153","messageId":"154","endLine":28,"endColumn":19},{"ruleId":"160","severity":1,"message":"167","line":136,"column":6,"nodeType":"162","endLine":136,"endColumn":26,"suggestions":"206"},"no-native-reassign",["207"],"no-negated-in-lhs",["208"],["207"],["208"],"no-unused-vars","'selectedYear' is assigned a value but never used.","Identifier","unusedVar","'setSelectedYear' is assigned a value but never used.","'radius' is assigned a value but never used.","'yearsRange' is assigned a value but never used.","'rectBackground' is assigned a value but never used.","'yearCirclesText' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'margin.bottom', 'margin.left', and 'margin.right'. Either include them or remove the dependency array.","ArrayExpression",["209"],"'chroma' is defined but never used.","'shapesBackground' is assigned a value but never used.","'flowers' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'margin.bottom', 'margin.left', 'margin.right', and 'margin.top'. Either include them or remove the dependency array.",["210"],["211"],["207"],["208"],"'radiusTimeline' is assigned a value but never used.",["212"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","'useRef' is defined but never used.","'d3' is defined but never used.","'margin' is assigned a value but never used.","'shapeBackgroundColour' is assigned a value but never used.","'axisTextColour' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'setSelectedAnime'. Either include it or remove the dependency array. If 'setSelectedAnime' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["213"],"'dataOneYear' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'margin.bottom', 'margin.left', 'margin.right', and 'setSelectedYear'. Either include them or remove the dependency array. If 'setSelectedYear' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["214"],"'_' is defined but never used.",["215"],"'svgLegendRef' is assigned a value but never used.","'legendWidth' is assigned a value but never used.","'legendSelectedGenreTextFront' is assigned a value but never used.","'legendSelectedGenreTextInstructions' is assigned a value but never used.","'allGenresButtonText' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["216"],"'selectYear' is assigned a value but never used.","'lowerGenreColour' is assigned a value but never used.","'higherGengeColour' is assigned a value but never used.","'top20Genres' is assigned a value but never used.","'top20GenresSerious' is assigned a value but never used.","'top20GenresChill' is assigned a value but never used.","'petalPaths' is assigned a value but never used.",["217"],"no-global-assign","no-unsafe-negation",{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},{"desc":"220","fix":"222"},{"desc":"223","fix":"224"},{"desc":"225","fix":"226"},{"desc":"227","fix":"228"},{"desc":"227","fix":"229"},{"desc":"230","fix":"231"},{"desc":"220","fix":"232"},"Update the dependencies array to be: [data, margin.bottom, margin.left, margin.right]",{"range":"233","text":"234"},"Update the dependencies array to be: [data, margin.bottom, margin.left, margin.right, margin.top, selectedYear]",{"range":"235","text":"236"},{"range":"237","text":"236"},"Update the dependencies array to be: [data, selectedYear, allData, margin.left, margin.right, margin.bottom]",{"range":"238","text":"239"},"Update the dependencies array to be: [data, selectedYear, allData, setSelectedAnime]",{"range":"240","text":"241"},"Update the dependencies array to be: [data, selectedYear, allData, margin.left, margin.right, margin.bottom, setSelectedYear]",{"range":"242","text":"243"},{"range":"244","text":"243"},"Update the dependencies array to be: [data, allData, selectedYear, margin.left, margin.right, margin.bottom, margin.top]",{"range":"245","text":"246"},{"range":"247","text":"236"},[5436,5442],"[data, margin.bottom, margin.left, margin.right]",[6265,6285],"[data, margin.bottom, margin.left, margin.right, margin.top, selectedYear]",[6477,6497],[7907,7936],"[data, selectedYear, allData, margin.left, margin.right, margin.bottom]",[3226,3255],"[data, selectedYear, allData, setSelectedAnime]",[5038,5067],"[data, selectedYear, allData, margin.left, margin.right, margin.bottom, setSelectedYear]",[5106,5135],[15783,15812],"[data, allData, selectedYear, margin.left, margin.right, margin.bottom, margin.top]",[4619,4639]]